// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package army.warfare.skiter;

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the detils of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Library
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.util.concurrent.atomic.AtomicLong
import java.util.concurrent.atomic.AtomicReference
import java.util.concurrent.locks.ReentrantLock
import kotlin.concurrent.withLock

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

@Structure.FieldOrder("capacity", "len", "data", "padding")
open class RustBuffer : Structure() {
    @JvmField var capacity: Int = 0
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null
    // Ref https://github.com/mozilla/uniffi-rs/issues/334 for this weird "padding" field.
    @JvmField var padding: Long = 0

    class ByValue : RustBuffer(), Structure.ByValue

    companion object {
        internal fun alloc(size: Int = 0) = rustCall(InternalError.ByReference()) { err ->
            _UniFFILib.INSTANCE.ffi_skiter_71b6_rustbuffer_alloc(size, err)
        }

        internal fun free(buf: RustBuffer.ByValue) = rustCall(InternalError.ByReference()) { err ->
            _UniFFILib.INSTANCE.ffi_skiter_71b6_rustbuffer_free(buf, err)
        }

        internal fun reserve(buf: RustBuffer.ByValue, additional: Int) = rustCall(InternalError.ByReference()) { err ->
            _UniFFILib.INSTANCE.ffi_skiter_71b6_rustbuffer_reserve(buf, additional, err)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data", "padding", "padding2")
open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null
    // Ref https://github.com/mozilla/uniffi-rs/issues/334 for these weird "padding" fields.
    @JvmField var padding: Long = 0
    @JvmField var padding2: Int = 0

    class ByValue : ForeignBytes(), Structure.ByValue
}


// A helper for structured writing of data into a `RustBuffer`.
// This is very similar to `java.nio.ByteBuffer` but it knows how to grow
// the underlying `RustBuffer` on demand.
//
// TODO: we should benchmark writing things into a `RustBuffer` versus building
// up a bytearray and then copying it across.

class RustBufferBuilder() {
    var rbuf = RustBuffer.ByValue()
    var bbuf: ByteBuffer? = null

    init {
        val rbuf = RustBuffer.alloc(16) // Totally arbitrary initial size
        rbuf.writeField("len", 0)
        this.setRustBuffer(rbuf)
    }

    internal fun setRustBuffer(rbuf: RustBuffer.ByValue) {
        this.rbuf = rbuf
        this.bbuf = this.rbuf.data?.getByteBuffer(0, this.rbuf.capacity.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
            it.position(rbuf.len)
        }
    }

    fun finalize() : RustBuffer.ByValue {
        val rbuf = this.rbuf
        // Ensure that the JVM-level field is written through to native memory
        // before turning the buffer, in case its recipient uses it in a context
        // JNA doesn't apply its automatic synchronization logic.
        rbuf.writeField("len", this.bbuf!!.position())
        this.setRustBuffer(RustBuffer.ByValue())
        return rbuf
    }

    fun discard() {
        val rbuf = this.finalize()
        RustBuffer.free(rbuf)
    }

    internal fun reserve(size: Int, write: (ByteBuffer) -> Unit) {
        // TODO: this will perform two checks to ensure we're not overflowing the buffer:
        // one here where we check if it needs to grow, and another when we call a write
        // method on the ByteBuffer. It might be cheaper to use exception-driven control-flow
        // here, trying the write and growing if it throws a `BufferOverflowException`.
        // Benchmarking needed.
        if (this.bbuf!!.position() + size > this.rbuf.capacity) {
            rbuf.writeField("len", this.bbuf!!.position())
            this.setRustBuffer(RustBuffer.reserve(this.rbuf, size))
        }
        write(this.bbuf!!)
    }

    fun putByte(v: Byte) {
        this.reserve(1) { bbuf ->
            bbuf.put(v)
        }
    }

    fun putShort(v: Short) {
        this.reserve(2) { bbuf ->
            bbuf.putShort(v)
        }
    }

    fun putInt(v: Int) {
        this.reserve(4) { bbuf ->
            bbuf.putInt(v)
        }
    }

    fun putLong(v: Long) {
        this.reserve(8) { bbuf ->
            bbuf.putLong(v)
        }
    }

    fun putFloat(v: Float) {
        this.reserve(4) { bbuf ->
            bbuf.putFloat(v)
        }
    }

    fun putDouble(v: Double) {
        this.reserve(8) { bbuf ->
            bbuf.putDouble(v)
        }
    }

    fun put(v: ByteArray) {
        this.reserve(v.size) { bbuf ->
            bbuf.put(v)
        }
    }
}

// Helpers for reading primitive data types from a bytebuffer.

internal fun<T> liftFromRustBuffer(rbuf: RustBuffer.ByValue, readItem: (ByteBuffer) -> T): T {
    val buf = rbuf.asByteBuffer()!!
    try {
       val item = readItem(buf)
       if (buf.hasRemaining()) {
           throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
       }
       return item
    } finally {
        RustBuffer.free(rbuf)
    }
}

internal fun<T> lowerIntoRustBuffer(v: T, writeItem: (T, RustBufferBuilder) -> Unit): RustBuffer.ByValue {
    // TODO: maybe we can calculate some sort of initial size hint?
    val buf = RustBufferBuilder()
    try {
        writeItem(v, buf)
        return buf.finalize()
    } catch (e: Throwable) {
        buf.discard()
        throw e
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.




@ExperimentalUnsignedTypes
internal fun UInt.Companion.lift(v: Int): UInt {
    return v.toUInt()
}

@ExperimentalUnsignedTypes
internal fun UInt.Companion.read(buf: ByteBuffer): UInt {
    return UInt.lift(buf.getInt())
}

@ExperimentalUnsignedTypes
internal fun UInt.lower(): Int {
    return this.toInt()
}

@ExperimentalUnsignedTypes
internal fun UInt.write(buf: RustBufferBuilder) {
    buf.putInt(this.toInt())
}





@ExperimentalUnsignedTypes
internal fun ULong.Companion.lift(v: Long): ULong {
    return v.toULong()
}

@ExperimentalUnsignedTypes
internal fun ULong.Companion.read(buf: ByteBuffer): ULong {
    return ULong.lift(buf.getLong())
}

@ExperimentalUnsignedTypes
internal fun ULong.lower(): Long {
    return this.toLong()
}

@ExperimentalUnsignedTypes
internal fun ULong.write(buf: RustBufferBuilder) {
    buf.putLong(this.toLong())
}





internal fun String.Companion.lift(rbuf: RustBuffer.ByValue): String {
    try {
        val byteArr = ByteArray(rbuf.len)
        rbuf.asByteBuffer()!!.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    } finally {
        RustBuffer.free(rbuf)
    }
}

internal fun String.Companion.read(buf: ByteBuffer): String {
    val len = buf.getInt()
    val byteArr = ByteArray(len)
    buf.get(byteArr)
    return byteArr.toString(Charsets.UTF_8)
}

internal fun String.lower(): RustBuffer.ByValue {
    val byteArr = this.toByteArray(Charsets.UTF_8)
    // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
    // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
    val rbuf = RustBuffer.alloc(byteArr.size)
    rbuf.asByteBuffer()!!.put(byteArr)
    return rbuf
}

internal fun String.write(buf: RustBufferBuilder) {
    val byteArr = this.toByteArray(Charsets.UTF_8)
    buf.putInt(byteArr.size)
    buf.put(byteArr)
}











internal fun Int.Companion.lift(v: Int): Int {
    return v
}

internal fun Int.Companion.read(buf: ByteBuffer): Int {
    return buf.getInt()
}

internal fun Int.lower(): Int {
    return this
}

internal fun Int.write(buf: RustBufferBuilder) {
    buf.putInt(this)
}










@Synchronized
fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.${componentName}.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "uniffi_${componentName}"
}

inline fun <reified Lib : Library> loadIndirect(
    componentName: String
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.

internal interface _UniFFILib : Library {
    companion object {
        internal val INSTANCE: _UniFFILib by lazy { 
            loadIndirect<_UniFFILib>(componentName = "skiter")
            .also { lib: _UniFFILib ->
                CallbackInterfaceSciterEventsInternals.register(lib)
                }
            
        }
    }

    fun ffi_skiter_71b6_Sciter_object_free(handle: Long
    , uniffi_out_err: Structure.ByReference
    ): Unit

    fun skiter_71b6_Sciter_new(width: Int,height: Int,hwnd: Long,events: Long
    , uniffi_out_err: Structure.ByReference
    ): Long

    fun skiter_71b6_Sciter_resize(handle: Long,width: Int,height: Int
    , uniffi_out_err: Structure.ByReference
    ): Unit

    fun skiter_71b6_Sciter_resolution(handle: Long,ppi: Int
    , uniffi_out_err: Structure.ByReference
    ): Unit

    fun skiter_71b6_Sciter_heartbeat(handle: Long
    , uniffi_out_err: Structure.ByReference
    ): Unit

    fun skiter_71b6_Sciter_render(handle: Long
    , uniffi_out_err: Structure.ByReference
    ): Unit

    fun skiter_71b6_Sciter_redraw(handle: Long
    , uniffi_out_err: Structure.ByReference
    ): Unit

    fun skiter_71b6_Sciter_mouse_moved(handle: Long,x: Int,y: Int
    , uniffi_out_err: Structure.ByReference
    ): Unit

    fun skiter_71b6_Sciter_mouse_down(handle: Long,x: Int,y: Int
    , uniffi_out_err: Structure.ByReference
    ): Unit

    fun skiter_71b6_Sciter_mouse_up(handle: Long,x: Int,y: Int
    , uniffi_out_err: Structure.ByReference
    ): Unit

    fun skiter_71b6_Sciter_click(handle: Long,x: Int,y: Int
    , uniffi_out_err: Structure.ByReference
    ): Unit

    fun skiter_71b6_Sciter_call_event(handle: Long,name: RustBuffer.ByValue,data: RustBuffer.ByValue
    , uniffi_out_err: Structure.ByReference
    ): Unit

    fun skiter_71b6_Sciter_load_html_string(handle: Long,html: RustBuffer.ByValue
    , uniffi_out_err: Structure.ByReference
    ): Unit

    fun skiter_71b6_Sciter_load_html_file(handle: Long,file: RustBuffer.ByValue
    , uniffi_out_err: Structure.ByReference
    ): Unit

    fun skiter_71b6_Sciter_data_ready(handle: Long,uri: RustBuffer.ByValue,request_id: Long,data: RustBuffer.ByValue
    , uniffi_out_err: Structure.ByReference
    ): Unit

    fun ffi_skiter_71b6_SciterEvents_init_callback(callback_stub: ForeignCallback
    , uniffi_out_err: Structure.ByReference
    ): Unit

    fun ffi_skiter_71b6_rustbuffer_alloc(size: Int
    , uniffi_out_err: Structure.ByReference
    ): RustBuffer.ByValue

    fun ffi_skiter_71b6_rustbuffer_from_bytes(bytes: ForeignBytes.ByValue
    , uniffi_out_err: Structure.ByReference
    ): RustBuffer.ByValue

    fun ffi_skiter_71b6_rustbuffer_free(buf: RustBuffer.ByValue
    , uniffi_out_err: Structure.ByReference
    ): Unit

    fun ffi_skiter_71b6_rustbuffer_reserve(buf: RustBuffer.ByValue,additional: Int
    , uniffi_out_err: Structure.ByReference
    ): RustBuffer.ByValue

    fun ffi_skiter_71b6_string_free(cstr: Pointer
    , uniffi_out_err: Structure.ByReference
    ): Unit

    
}

// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.

abstract class FFIObject(
    private val handle: AtomicLong
) {
    open fun destroy() {
        this.handle.set(0L)
    }

    internal inline fun <R> callWithHandle(block: (handle: Long) -> R) =
        this.handle.get().let { handle -> 
            if (handle != 0L) {
                block(handle)
            } else {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
        }
}

inline fun <T : FFIObject, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            this.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

internal typealias Handle = Long
internal class ConcurrentHandleMap<T>(
    private val leftMap: MutableMap<Handle, T> = mutableMapOf(),
    private val rightMap: MutableMap<T, Handle> = mutableMapOf()
) {
    private val lock = java.util.concurrent.locks.ReentrantLock()
    private val currentHandle = AtomicLong(0L)
    private val stride = 1L

    fun insert(obj: T): Handle =
        lock.withLock {
            rightMap[obj] ?:
                currentHandle.getAndAccumulate(stride) { a, b -> a + b }
                    .also { handle ->
                        leftMap[handle] = obj
                        rightMap[obj] = handle
                    }
            }

    fun <R> callWithResult(handle: Handle, fn: (T) -> R): R =
        lock.withLock {
            leftMap[handle] ?: throw RuntimeException("Panic: handle not in handlemap")
        }.let { obj ->
            fn.invoke(obj)
        }

    fun get(handle: Handle) = lock.withLock {
        leftMap[handle]
    }

    fun delete(handle: Handle) { 
        this.remove(handle)
    }

    fun remove(handle: Handle): T? =
        lock.withLock {
            leftMap.remove(handle)?.let { obj ->
                rightMap.remove(obj)
                obj
            }
        }
}

interface ForeignCallback : com.sun.jna.Callback {
    public fun invoke(handle: Long, method: Int, args: RustBuffer.ByValue): RustBuffer.ByValue
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
internal const val IDX_CALLBACK_FREE = 0

internal abstract class CallbackInternals<CallbackInterface>(
    val foreignCallback: ForeignCallback
) {
    val handleMap = ConcurrentHandleMap<CallbackInterface>()

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    abstract fun register(lib: _UniFFILib)

    fun drop(handle: Long): RustBuffer.ByValue {
        return handleMap.remove(handle).let { RustBuffer.ByValue() }
    }

    fun lift(n: Long) = handleMap.get(n)

    fun read(buf: ByteBuffer) = lift(buf.getLong())

    fun lower(v: CallbackInterface) =
        handleMap.insert(v).also {
            assert(handleMap.get(it) === v) { "Handle map is not returning the object we just placed there. This is a bug in the HandleMap." }
        }

    fun write(v: CallbackInterface, buf: RustBufferBuilder) =
        buf.putLong(lower(v))
}

// Public interface members begin here.
// Public facing enums
// Error definitions
interface RustErrorReference : Structure.ByReference {
    fun isFailure(): Boolean
    fun<E: Exception> intoException(): E
    fun ensureConsumed()
    fun getMessage(): String?
    fun consumeErrorMessage(): String
}

@Structure.FieldOrder("code", "message")
internal open class RustError : Structure() {
   open class ByReference: RustError(), RustErrorReference

    @JvmField var code: Int = 0
    @JvmField var message: Pointer? = null

    /**
     * Does this represent success?
     */
    fun isSuccess(): Boolean {
        return code == 0
    }

    /**
     * Does this represent failure?
     */
    fun isFailure(): Boolean {
        return code != 0
    }

    @Synchronized
    fun ensureConsumed() {
        if (this.message != null) {
            rustCall(InternalError.ByReference()) { err ->
                _UniFFILib.INSTANCE.ffi_skiter_71b6_string_free(this.message!!, err)
             }
            this.message = null
        }
    }

    /**
     * Get the error message or null if there is none.
     */
    fun getMessage(): String? {
        return this.message?.getString(0, "utf8")
    }

    /**
     * Get and consume the error message, or null if there is none.
     */
    @Synchronized
    fun consumeErrorMessage(): String {
        val result = this.getMessage()
        if (this.message != null) {
            this.ensureConsumed()
        }
        if (result == null) {
            throw NullPointerException("consumeErrorMessage called with null message!")
        }
        return result
    }

    @Suppress("ReturnCount", "TooGenericExceptionThrown")
    open fun<E: Exception> intoException(): E {
        if (!isFailure()) {
            // It's probably a bad idea to throw here! We're probably leaking something if this is
            // ever hit! (But we shouldn't ever hit it?)
            throw RuntimeException("[Bug] intoException called on non-failure!")
        }
        this.consumeErrorMessage()
        throw RuntimeException("Generic errors are not implemented yet")
    }
}

internal open class InternalError : RustError() {
    class ByReference: InternalError(), RustErrorReference

    @Suppress("ReturnCount", "TooGenericExceptionThrown", "UNCHECKED_CAST")
    override fun<E: Exception> intoException(): E {
        if (!isFailure()) {
            // It's probably a bad idea to throw here! We're probably leaking something if this is
            // ever hit! (But we shouldn't ever hit it?)
            throw RuntimeException("[Bug] intoException called on non-failure!")
        }
        val message = this.consumeErrorMessage()
        return InternalException(message) as E
    }
}

class InternalException(message: String) : Exception(message)

// Helpers for calling Rust with errors:
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself
private inline fun <U, E: RustErrorReference> nullableRustCall(callback: (E) -> U?, err: E): U? {
    try {
        val ret = callback(err)
        if (err.isFailure()) {
            throw err.intoException()
        }
        return ret
    } finally {
        // This only matters if `callback` throws (or does a non-local return, which
        // we currently don't do)
        err.ensureConsumed()
    }
}

private inline fun <U, E: RustErrorReference> rustCall(err: E, callback: (E) -> U?): U {
    return nullableRustCall(callback, err)!!
}

// Public facing records

// Namespace functions


// Objects

public interface SciterInterface {
    fun resize(width: UInt, height: UInt )
    fun resolution(ppi: UInt )
    fun heartbeat()
    fun render()
    fun redraw()
    fun mouseMoved(x: Int, y: Int )
    fun mouseDown(x: Int, y: Int )
    fun mouseUp(x: Int, y: Int )
    fun click(x: Int, y: Int )
    fun callEvent(name: String, data: String )
    fun loadHtmlString(html: String )
    fun loadHtmlFile(file: String )
    fun dataReady(uri: String, requestId: ULong, data: String )
    
}

class Sciter(
    handle: Long
) : FFIObject(AtomicLong(handle)), SciterInterface {
    constructor(width: UInt, height: UInt, hwnd: ULong, events: SciterEvents ) :
        this(rustCall(
    InternalError.ByReference()
) { err ->
    _UniFFILib.INSTANCE.skiter_71b6_Sciter_new(width.lower(), height.lower(), hwnd.lower(), CallbackInterfaceSciterEventsInternals.lower(events) ,err)
})

    /**
     * Disconnect the object from the underlying Rust object.
     * 
     * It can be called more than once, but once called, interacting with the object 
     * causes an `IllegalStateException`.
     * 
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override fun destroy() {
        try {
            callWithHandle {
                super.destroy() // poison the handle so no-one else can use it before we tell rust.
                rustCall(InternalError.ByReference()) { err ->
                    _UniFFILib.INSTANCE.ffi_skiter_71b6_Sciter_object_free(it, err)
                }
            }
        } catch (e: IllegalStateException) {
            // The user called this more than once. Better than less than once.
        }
    }

    override fun resize(width: UInt, height: UInt ) =
        callWithHandle {
rustCall(
    InternalError.ByReference()
) { err ->
    _UniFFILib.INSTANCE.skiter_71b6_Sciter_resize(it, width.lower(), height.lower() , err)
} 
        }
    
    override fun resolution(ppi: UInt ) =
        callWithHandle {
rustCall(
    InternalError.ByReference()
) { err ->
    _UniFFILib.INSTANCE.skiter_71b6_Sciter_resolution(it, ppi.lower() , err)
} 
        }
    
    override fun heartbeat() =
        callWithHandle {
rustCall(
    InternalError.ByReference()
) { err ->
    _UniFFILib.INSTANCE.skiter_71b6_Sciter_heartbeat(it,  err)
} 
        }
    
    override fun render() =
        callWithHandle {
rustCall(
    InternalError.ByReference()
) { err ->
    _UniFFILib.INSTANCE.skiter_71b6_Sciter_render(it,  err)
} 
        }
    
    override fun redraw() =
        callWithHandle {
rustCall(
    InternalError.ByReference()
) { err ->
    _UniFFILib.INSTANCE.skiter_71b6_Sciter_redraw(it,  err)
} 
        }
    
    override fun mouseMoved(x: Int, y: Int ) =
        callWithHandle {
rustCall(
    InternalError.ByReference()
) { err ->
    _UniFFILib.INSTANCE.skiter_71b6_Sciter_mouse_moved(it, x.lower(), y.lower() , err)
} 
        }
    
    override fun mouseDown(x: Int, y: Int ) =
        callWithHandle {
rustCall(
    InternalError.ByReference()
) { err ->
    _UniFFILib.INSTANCE.skiter_71b6_Sciter_mouse_down(it, x.lower(), y.lower() , err)
} 
        }
    
    override fun mouseUp(x: Int, y: Int ) =
        callWithHandle {
rustCall(
    InternalError.ByReference()
) { err ->
    _UniFFILib.INSTANCE.skiter_71b6_Sciter_mouse_up(it, x.lower(), y.lower() , err)
} 
        }
    
    override fun click(x: Int, y: Int ) =
        callWithHandle {
rustCall(
    InternalError.ByReference()
) { err ->
    _UniFFILib.INSTANCE.skiter_71b6_Sciter_click(it, x.lower(), y.lower() , err)
} 
        }
    
    override fun callEvent(name: String, data: String ) =
        callWithHandle {
rustCall(
    InternalError.ByReference()
) { err ->
    _UniFFILib.INSTANCE.skiter_71b6_Sciter_call_event(it, name.lower(), data.lower() , err)
} 
        }
    
    override fun loadHtmlString(html: String ) =
        callWithHandle {
rustCall(
    InternalError.ByReference()
) { err ->
    _UniFFILib.INSTANCE.skiter_71b6_Sciter_load_html_string(it, html.lower() , err)
} 
        }
    
    override fun loadHtmlFile(file: String ) =
        callWithHandle {
rustCall(
    InternalError.ByReference()
) { err ->
    _UniFFILib.INSTANCE.skiter_71b6_Sciter_load_html_file(it, file.lower() , err)
} 
        }
    
    override fun dataReady(uri: String, requestId: ULong, data: String ) =
        callWithHandle {
rustCall(
    InternalError.ByReference()
) { err ->
    _UniFFILib.INSTANCE.skiter_71b6_Sciter_data_ready(it, uri.lower(), requestId.lower(), data.lower() , err)
} 
        }
    
    
}


// Callback Interfaces


public interface SciterEvents {
    fun onRedrawRequired()
    fun onEvent(name: String, data: String )
    fun onLoadResource(uri: String, requestId: ULong )
    
}


internal class CallbackInterfaceSciterEventsFFI : ForeignCallback {
    @Suppress("TooGenericExceptionCaught")
    override fun invoke(handle: Long, method: Int, args: RustBuffer.ByValue): RustBuffer.ByValue {
        return CallbackInterfaceSciterEventsInternals.handleMap.callWithResult(handle) { cb -> 
            when (method) {
                IDX_CALLBACK_FREE -> CallbackInterfaceSciterEventsInternals.drop(handle)
                1 -> this.invokeOnRedrawRequired(cb, args)
                2 -> this.invokeOnEvent(cb, args)
                3 -> this.invokeOnLoadResource(cb, args)
                
                else -> RustBuffer.ByValue()
            }
        }
    }

    
    private fun invokeOnRedrawRequired(kotlinCallbackInterface: SciterEvents, args: RustBuffer.ByValue): RustBuffer.ByValue =
        try {
            
            kotlinCallbackInterface.onRedrawRequired()
            .let { RustBuffer.ByValue() }
                } finally {
            RustBuffer.free(args)
        }

    
    private fun invokeOnEvent(kotlinCallbackInterface: SciterEvents, args: RustBuffer.ByValue): RustBuffer.ByValue =
        try {
            val buf = args.asByteBuffer() ?: throw InternalError("No ByteBuffer in RustBuffer; this is a Uniffi bug")
            kotlinCallbackInterface.onEvent(
                    String.read(buf), 
                    String.read(buf) 
                    )
            .let { RustBuffer.ByValue() }
                } finally {
            RustBuffer.free(args)
        }

    
    private fun invokeOnLoadResource(kotlinCallbackInterface: SciterEvents, args: RustBuffer.ByValue): RustBuffer.ByValue =
        try {
            val buf = args.asByteBuffer() ?: throw InternalError("No ByteBuffer in RustBuffer; this is a Uniffi bug")
            kotlinCallbackInterface.onLoadResource(
                    String.read(buf), 
                    ULong.read(buf) 
                    )
            .let { RustBuffer.ByValue() }
                } finally {
            RustBuffer.free(args)
        }

    
}

internal object CallbackInterfaceSciterEventsInternals: CallbackInternals<SciterEvents>(
    foreignCallback = CallbackInterfaceSciterEventsFFI()
) {
    override fun register(lib: _UniFFILib) {
        rustCall(InternalError.ByReference()) { err ->
            lib.ffi_skiter_71b6_SciterEvents_init_callback(this.foreignCallback, err)
        }
    }
}


