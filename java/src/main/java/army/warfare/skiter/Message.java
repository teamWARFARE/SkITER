// Automatically generated by flapigen
package army.warfare.skiter;


public final class Message {

    private Message() {}

    public static Message create(GfxLayer backend, boolean transparent) {
        int a0 = backend.getValue();
        long ret = do_create(a0, transparent);
        Message convRet = new Message(InternalPointerMarker.RAW_PTR, ret);

        JNIReachabilityFence.reachabilityFence1(backend);

        return convRet;
    }
    private static native long do_create(int backend, boolean transparent);

    public static Message destroy() {
        long ret = do_destroy();
        Message convRet = new Message(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_destroy();

    public static Message size(long width, long height) {
        long ret = do_size(width, height);
        Message convRet = new Message(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_size(long width, long height);

    public static Message resolution(long ppi) {
        long ret = do_resolution(ppi);
        Message convRet = new Message(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_resolution(long ppi);

    public static Message focus(boolean enter) {
        long ret = do_focus(enter);
        Message convRet = new Message(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_focus(boolean enter);

    public static Message heartbit(long milliseconds) {
        long ret = do_heartbit(milliseconds);
        Message convRet = new Message(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_heartbit(long milliseconds);

    public static Message redraw() {
        long ret = do_redraw();
        Message convRet = new Message(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_redraw();

    public static Message paint(PaintLayer layer) {
        long a0 = layer.mNativeObj;
        layer.mNativeObj = 0;

        long ret = do_paint(a0);
        Message convRet = new Message(InternalPointerMarker.RAW_PTR, ret);

        JNIReachabilityFence.reachabilityFence1(layer);

        return convRet;
    }
    private static native long do_paint(long layer);

    public static Message mouse(MouseEvents event, MouseButtons button, KeyboardStates modifiers, Point pos) {
        int a0 = event.getValue();        int a1 = button.getValue();        int a2 = modifiers.getValue();
        long a3 = pos.mNativeObj;
        pos.mNativeObj = 0;

        long ret = do_mouse(a0, a1, a2, a3);
        Message convRet = new Message(InternalPointerMarker.RAW_PTR, ret);

        JNIReachabilityFence.reachabilityFence4(event, button, modifiers, pos);

        return convRet;
    }
    private static native long do_mouse(int event, int button, int modifiers, long pos);

    public static Message keyboard(KeyEvents event, long code, KeyboardStates modifiers) {
        int a0 = event.getValue();        int a2 = modifiers.getValue();
        long ret = do_keyboard(a0, code, a2);
        Message convRet = new Message(InternalPointerMarker.RAW_PTR, ret);

        JNIReachabilityFence.reachabilityFence2(event, modifiers);

        return convRet;
    }
    private static native long do_keyboard(int event, long code, int modifiers);

    public synchronized void delete() {
        if (mNativeObj != 0) {
            do_delete(mNativeObj);
            mNativeObj = 0;
       }
    }
    @Override
    protected void finalize() throws Throwable {
        try {
            delete();
        }
        finally {
             super.finalize();
        }
    }
    private static native void do_delete(long me);
    /*package*/ Message(InternalPointerMarker marker, long ptr) {
        assert marker == InternalPointerMarker.RAW_PTR;
        this.mNativeObj = ptr;
    }
    /*package*/ long mNativeObj;
}